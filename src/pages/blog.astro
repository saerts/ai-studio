---
import { getCollection } from 'astro:content';
import BaseLayout from '../components/layout/BaseLayout.astro';
import Section from '../components/ui/Section.astro';
import Card from '../components/ui/Card.astro';
import { formatDate } from '../lib/utils';

const seoProps = {
  title: 'Blog',
  description: 'Blijf op de hoogte van de laatste ontwikkelingen op het gebied van AI en automatisering.',
  canonical: 'https://ai-studio.be/blog',
};

// Get all blog posts and sort by publication date
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

const sortedPosts = allPosts.sort((a, b) => {
  return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
});

// Get unique tags for filtering
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();

// Pagination (can be enhanced)
const postsPerPage = 12;
const currentPage = 1;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
const paginatedPosts = sortedPosts.slice(0, postsPerPage);
---

<BaseLayout {...seoProps}>
  <Section class="scroll-animate">
    <div class="text-center">
      <h1 class="text-4xl font-bold tracking-tight text-white sm:text-5xl gradient-text">
        Blog
      </h1>
      <p class="mx-auto mt-6 max-w-2xl text-lg leading-8 text-zinc-300">
        Blijf op de hoogte van de laatste ontwikkelingen op het gebied van AI en automatisering.
        Praktische tips, case studies en inzichten van experts.
      </p>
    </div>

    {allTags.length > 0 && (
      <div class="mt-12">
        <h2 class="sr-only">Filter op tags</h2>
        <div class="flex flex-wrap justify-center gap-2">
          <button
            class="filter-tag glass-card px-4 py-2 text-sm font-medium text-white/80 transition-all hover:text-primary-400 hover:border-primary-400/30 data-[active]:bg-primary-400/20 data-[active]:text-primary-400 data-[active]:border-primary-400"
            data-tag="all"
            data-active="true"
          >
            Alle artikelen
          </button>
          {allTags.map((tag) => (
            <button
              class="filter-tag glass-card px-4 py-2 text-sm font-medium text-white/80 transition-all hover:text-primary-400 hover:border-primary-400/30 data-[active]:bg-primary-400/20 data-[active]:text-primary-400 data-[active]:border-primary-400"
              data-tag={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    )}

    <!-- Search (Progressive Enhancement) -->
    <div class="mt-8">
      <div class="mx-auto max-w-md">
        <label for="search" class="sr-only">Zoek artikelen</label>
        <div class="relative">
          <input
            type="text"
            id="search"
            placeholder="Zoek artikelen..."
            class="form-input pl-10"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-white/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </Section>

  <Section class="pt-0 scroll-animate-fade">
    <div id="posts-container">
      {paginatedPosts.length === 0 ? (
        <div class="text-center py-12">
          <p class="text-zinc-400">
            Nog geen artikelen beschikbaar. Check binnenkort terug!
          </p>
        </div>
      ) : (
        <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
          {paginatedPosts.map((post) => (
            <article data-tags={post.data.tags.join(',')} data-title={post.data.title.toLowerCase()} data-description={post.data.description.toLowerCase()}>
              <Card>
                <div class="flex flex-col h-full">
                  <div class="flex-1">
                    <h2 class="text-xl font-semibold text-white">
                      <a
                        href={`/blog/${post.slug}`}
                        class="hover:text-primary-400 focus:text-primary-400 transition-colors"
                      >
                        {post.data.title}
                      </a>
                    </h2>

                    <p class="mt-3 text-zinc-300 line-clamp-3">
                      {post.data.description}
                    </p>

                    {post.data.tags.length > 0 && (
                      <div class="mt-4 flex flex-wrap gap-2">
                        {post.data.tags.slice(0, 3).map((tag) => (
                          <span class="inline-flex items-center rounded-full bg-primary-400/20 px-2.5 py-0.5 text-xs font-medium text-primary-400">
                            {tag}
                          </span>
                        ))}
                        {post.data.tags.length > 3 && (
                          <span class="inline-flex items-center rounded-full bg-zinc-600/30 px-2.5 py-0.5 text-xs font-medium text-zinc-400">
                            +{post.data.tags.length - 3}
                          </span>
                        )}
                      </div>
                    )}
                  </div>

                  <div class="mt-6 flex items-center justify-between">
                    <div class="flex items-center text-sm text-zinc-400">
                      <time datetime={post.data.pubDate.toISOString()}>
                        {formatDate(post.data.pubDate)}
                      </time>
                      <span class="mx-2">Â·</span>
                      <span>{post.data.source}</span>
                    </div>
                  </div>
                </div>
              </Card>
            </article>
          ))}
        </div>
      )}

      <div id="no-results" class="hidden text-center py-12">
        <p class="text-zinc-400">
          Geen artikelen gevonden. Probeer een andere zoekopdracht of filter.
        </p>
      </div>
    </div>

    {totalPages > 1 && (
      <div class="mt-12 flex justify-center">
        <nav aria-label="Paginering">
          <div class="flex space-x-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <a
                href={page === 1 ? '/blog' : `/blog/page/${page}`}
                class={`px-4 py-2 rounded-md text-sm font-medium transition-all ${
                  page === currentPage
                    ? 'bg-primary-400 text-black'
                    : 'glass-card text-white/80 hover:text-primary-400 hover:border-primary-400/30'
                }`}
                aria-current={page === currentPage ? 'page' : undefined}
              >
                {page}
              </a>
            ))}
          </div>
        </nav>
      </div>
    )}
  </Section>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const filterTags = document.querySelectorAll('.filter-tag');
    const postsContainer = document.getElementById('posts-container');
    const noResults = document.getElementById('no-results');

    if (!searchInput || !postsContainer || !noResults) return;

    let currentTag = 'all';

    // Filter functionality
    function filterPosts() {
      const searchTerm = searchInput.value.toLowerCase();
      const posts = postsContainer.querySelectorAll('article');
      let visibleCount = 0;

      posts.forEach(post => {
        const postElement = post as HTMLElement;
        const tags = postElement.dataset.tags?.split(',') || [];
        const title = postElement.dataset.title || '';
        const description = postElement.dataset.description || '';

        const matchesTag = currentTag === 'all' || tags.includes(currentTag);
        const matchesSearch = !searchTerm ||
          title.includes(searchTerm) ||
          description.includes(searchTerm) ||
          tags.some(tag => tag.toLowerCase().includes(searchTerm));

        if (matchesTag && matchesSearch) {
          postElement.style.display = '';
          visibleCount++;
        } else {
          postElement.style.display = 'none';
        }
      });

      // Show/hide no results message
      const postsGrid = postsContainer.querySelector('.grid');
      if (visibleCount === 0) {
        postsGrid?.classList.add('hidden');
        noResults.classList.remove('hidden');
      } else {
        postsGrid?.classList.remove('hidden');
        noResults.classList.add('hidden');
      }
    }

    // Search input
    let searchTimeout: NodeJS.Timeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(filterPosts, 300);
    });

    // Tag filtering
    filterTags.forEach(tag => {
      tag.addEventListener('click', () => {
        // Update active tag
        filterTags.forEach(t => {
          t.removeAttribute('data-active');
        });
        tag.setAttribute('data-active', 'true');

        // Update current tag
        currentTag = tag.getAttribute('data-tag') || 'all';

        // Filter posts
        filterPosts();
      });
    });

    // Initialize scroll animations
    import { initScrollAnimations } from '../lib/scrollAnimations.js';
    initScrollAnimations();
  });
</script>

<style>
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
</style>