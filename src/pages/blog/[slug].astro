---
import type { GetStaticPaths } from 'astro';
import BlogLayout from '../../components/layout/BlogLayout.astro';
import SafeHTML from '../../components/SafeHTML.astro';
import type { BlogPost } from '../../lib/validation';
import type {
  StaticPath,
  AstroCollectionEntry,
  AstroContent,
  BlogApiResponse,
} from '../../types/api';

export const getStaticPaths: GetStaticPaths = async () => {
  // Generate paths for both MCP posts and static posts
  const paths: StaticPath[] = [];

  // Fetch real articles from the API
  try {
    // Use the same API endpoint that the website uses
    const baseUrl =
      process.env.NODE_ENV === 'development'
        ? 'http://localhost:4321'
        : 'https://ai-studio44.be';

    const response = await fetch(`${baseUrl}/api/blog`);

    if (response.ok) {
      const data = (await response.json()) as BlogApiResponse;
      const posts = data.posts || [];

      // Add all posts from the API
      posts.forEach((post: unknown) => {
        const blogPost = post as BlogPost;
        paths.push({
          params: { slug: blogPost.slug },
          props: {
            isMCPPost: true, // All API posts are MCP posts
            post: {
              id: blogPost.id,
              slug: blogPost.slug,
              data: {
                title: blogPost.data.title,
                description: blogPost.data.description,
                pubDate: new Date(blogPost.data.pubDate),
                updatedDate: new Date(blogPost.data.updatedDate),
                tags: blogPost.data.tags,
                source: blogPost.data.source,
                canonicalUrl: blogPost.data.canonicalUrl,
                cover: blogPost.data.cover,
                coverAlt: blogPost.data.coverAlt,
                coverGenerated: blogPost.data.coverGenerated,
                draft: blogPost.data.draft,
              },
              body: blogPost.body,
            },
          },
        });
      });
    } else {
      console.warn('Could not fetch articles from API, using fallback');
    }
  } catch (error) {
    console.warn('Error fetching articles for static paths:', error);
  }

  // If no articles were loaded, return empty array for server-side rendering
  if (paths.length === 0) {
    console.log('No articles found, pages will be rendered on-demand');
  }

  // Add static posts as fallback
  try {
    const { getCollection } = await import('astro:content');
    const staticPosts = await getCollection('blog', ({ data }) => {
      return !data.draft;
    });

    staticPosts.forEach((post) => {
      paths.push({
        params: { slug: post.slug },
        props: {
          isMCPPost: false,
          post,
        },
      });
    });
  } catch (error) {
    console.warn('Could not load static posts:', error);
  }

  return paths;
};

// Get post data from props (passed from getStaticPaths)
const { post, isMCPPost } = Astro.props as {
  post: BlogPost | AstroCollectionEntry;
  isMCPPost: boolean;
};

// For static posts, render the content
let Content: AstroContent | null = null;
if (!isMCPPost && post && 'render' in post) {
  try {
    const astroPost = post as AstroCollectionEntry;
    const rendered = await astroPost.render!();
    Content = rendered.Content;
  } catch (error) {
    console.error('Failed to render static post content:', error);
  }
}
---

<BlogLayout post={post as any} isMCPPost={isMCPPost}>
  {
    isMCPPost ? (
      <div class="prose prose-invert prose-lg max-w-none">
        <SafeHTML
          content={
            post.body ||
            `
          <p>This article was automatically imported from <a href="${post.data.canonicalUrl}" class="text-teal-400 hover:text-teal-300 underline" target="_blank" rel="noopener">${post.data.source}</a>.</p>
          <p>Click the link above to read the full article on the original source.</p>
        `
          }
          class="text-zinc-300 leading-relaxed space-y-6"
        />

        {/* Source Attribution */}
        <div class="mt-12 p-6 rounded-lg bg-zinc-800/30 border border-zinc-700/50">
          <div class="flex items-start gap-4">
            <div class="flex-shrink-0">
              <svg
                class="h-6 w-6 text-teal-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
                />
              </svg>
            </div>
            <div class="flex-1">
              <h3 class="font-semibold text-white mb-2">Bron</h3>
              <p class="text-zinc-400 mb-3">
                Dit artikel werd automatisch ge√Ømporteerd uit {post.data.source}
                . Voor de volledige inhoud en eventuele updates, bezoek het
                originele artikel.
              </p>
              <a
                href={String(post.data.canonicalUrl || '')}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 text-teal-400 hover:text-teal-300 font-medium transition-colors"
              >
                Lees het volledige artikel
                <svg
                  class="h-4 w-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                  />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <div>{Content && <Content />}</div>
    )
  }
</BlogLayout>
