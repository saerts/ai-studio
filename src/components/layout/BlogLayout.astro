---
import type { CollectionEntry } from 'astro:content';
import BaseLayout from './BaseLayout.astro';
import { articleSchema, breadcrumbsSchema } from '../../lib/schema';
import Button from '../ui/Button.astro';

export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, pubDate, updatedDate, tags, source, canonicalUrl } = post.data;

const seoProps = {
  title,
  description,
  canonical: `https://ai-studio.be/blog/${post.slug}`,
  type: 'article' as const,
};

const schema = articleSchema(
  title,
  description,
  seoProps.canonical,
  pubDate.toISOString(),
  updatedDate?.toISOString(),
);

const breadcrumbs = breadcrumbsSchema([
  { name: 'Home', url: '/' },
  { name: 'Blog', url: '/blog' },
  { name: title, url: `/blog/${post.slug}` },
]);

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('nl-BE', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
};
---

<BaseLayout {...seoProps}>
  <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbs)} />

  <article class="mx-auto max-w-3xl px-4 py-12 sm:px-6 lg:px-8">
    <!-- Breadcrumbs -->
    <nav aria-label="Breadcrumb" class="mb-8">
      <ol class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
        <li>
          <a href="/" class="hover:text-primary-600">Home</a>
        </li>
        <li aria-hidden="true">/</li>
        <li>
          <a href="/blog" class="hover:text-primary-600">Blog</a>
        </li>
        <li aria-hidden="true">/</li>
        <li aria-current="page" class="text-gray-900 dark:text-gray-100">
          {title}
        </li>
      </ol>
    </nav>

    <header class="mb-8">
      <h1 class="mb-4 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl">
        {title}
      </h1>

      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
        <time datetime={pubDate.toISOString()}>
          {formatDate(pubDate)}
        </time>
        {updatedDate && (
          <>
            <span aria-hidden="true">·</span>
            <span>
              Bijgewerkt op <time datetime={updatedDate.toISOString()}>
                {formatDate(updatedDate)}
              </time>
            </span>
          </>
        )}
        <span aria-hidden="true">·</span>
        <span>Bron: {source}</span>
      </div>

      {tags.length > 0 && (
        <div class="mt-4 flex flex-wrap gap-2">
          {tags.map((tag) => (
            <span class="rounded-full bg-primary-100 px-3 py-1 text-xs font-medium text-primary-800 dark:bg-primary-900 dark:text-primary-200">
              {tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <div class="prose prose-lg max-w-none dark:prose-invert">
      <slot />
    </div>

    <footer class="mt-12 border-t border-gray-200 pt-8 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <Button href={canonicalUrl} variant="secondary" size="sm">
          Lees origineel artikel
        </Button>

        <Button href="/blog" variant="primary" size="sm">
          Terug naar blog
        </Button>
      </div>
    </footer>
  </article>
</BaseLayout>